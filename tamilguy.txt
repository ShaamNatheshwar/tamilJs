video 2
1) parent of DOM
document

2) to get the title of the webpage
document.title

3) to change the title of the webpage
document.title = "ssn"

4) to get the body
document.body

5) parent of document
window

6) to get the height and width
console.log(innerHeight, innerWidth)

7) to open a new website
open('https://www.google.com')

8) to close a website
close();

9) to move a webpage 
moveTo(100,500);

10) to resize
resizeTo(1000, 600);

11) to show an alert
alert('hi');

12) to prompt a stuff
prompt('this is shaam');

13)to print 
print('printing this site');

14) to throw an error
console.err('hi');

15) to throw an warning
console.warn('warning');


BOM Concepts
16) To get information about the screen
Screen

17)to get screen heigh and width
console.log(screen.height, screen.width);

18) to get information regarding the location
location

19)To change the title of the document after few seconds
setInterval(function (){
    window.document.title = "beyblade"
}, 5000)

20) To change the location of the file after sometime
setInterval( function(){
    location.href = "https://www.google.com";
}, 6000)

21) check whether protocol is https or not and alert accordingly
if(location.protocol == "https:"){
    alert('its secure');
}else{
    alert('its not secure');
}

22) how to assign a value
setInterval(()=>{
    location.assign('https://www.facebook.com')
}, 5000)

23) to go back and front in webdoc
history.go(1);
history.back();
history.forward(1);

24) to know more abt browsers
navigator


HTML DOM

25) to show document in terms of directory
console.dir(document)

26) to show body
document.body

27) show head
document.head

28) to get the domain
document.domain

29) to get the url
document.URL

30) to get the title
document.title

31) to get total links
document.links

32) to get total forms
document.forms

33) to get all the html elements
document.all

34) to get the cookie
document.cookie

35) to get all image related
document.image

36) to grab the element inside the tree and change its value
document.body.children[0].children[0].innerHTML = "ssn"

37) to find a stuff
document.find('<to be found>');


DOM properties and methods
38) create an object with a function
const obj = {
    name: 'shaam',
    age: 20,
    greet(){
        return this.name + 'hi';
    }
}
console.log(obj.greet());

39) now use a method to write html in js
const obj = {
    name: 'shaam',
    age: 20,
    greeting: function(){
        return this.name + 'hi';
    }
}
obj.name = 'majimbu';
const newOne  = obj.greeting();

document.write(newOne)

40) use innerHTML to set html
const obj = {
    name: 'shaam',
    age: 20,
    greeting: function(){
        return this.name + 'hi';
    }
}
obj.name = 'majimbu';
const newOne  = obj.greeting();

document.write(newOne)
document.body.innerHTML = `<h1>${newOne}</h1>`;

41) 
// Challenge: Dynamic simple program to get name & place automatically from the user.
prompt and manipulating DOM
const obj = {
    name: 'shaam',
    age: 20,
    greeting: function(){
        return this.name + this.age + 'hi';
    }
}

const nameInput = prompt('what is u r name', 'name');
const ageInput = prompt('what is your age');
obj.name = nameInput;
obj.age = ageInput;
console.log(obj.greeting());

Loaded Events

42) to check whether dom has processed all the content
document.addEventListener('DOMContentLoaded', ()=>{
    alert('content got loaded');
})

43) use getElementById and change the content
myApp = document.getElementById("content");
myApp.innerHTML = 'beyblader';
console.log(myApp);

44) DOM Content different DOM loading priority of loading the events

<!DOCTYPE html>
<html>
    <head>
        <link rel="stylesheet" href="style.css">
        <title>jstamilguy</title>
        <script>
            document.addEventListener('DOMContentLoaded', ()=>{
                myDoc = document.getElementById('content');
                heading = myDoc.children[0];
                img = myDoc.children[1];
                console.log(img.offsetHeight);
                console.log(heading);
            })

            window.addEventListener('load', ()=>{
                myDoc = document.getElementById('content');
                heading = myDoc.children[0];
                img = myDoc.children[1];
                console.log(img.offsetHeight);
                console.log(heading);
            })

            window.onload = function(){
                myDoc = document.getElementById('content');
                heading = myDoc.children[0];
                img = myDoc.children[1];
                console.log(img.offsetHeight);
                console.log(heading);
            }

            window.onunload = function(){
                myDoc = document.getElementById('content');
                heading = myDoc.children[0];
                img = myDoc.children[1];
                console.log(img.offsetHeight);
                console.log(heading);
            }

            window.onbeforeunload = function(){
                myDoc = document.getElementById('content');
                heading = myDoc.children[0];
                img = myDoc.children[1];
                console.log(img.offsetHeight);
                console.log(heading);
            }
        </script>
    </head>
    <body>


        <div id="content">
            <h1>This is mock</h1>
            <img src="https://images.unsplash.com/photo-1665731372479-551841cac2c9?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxlZGl0b3JpYWwtZmVlZHwxN3x8fGVufDB8fHx8&auto=format&fit=crop&w=400&q=60" alt="">
            
        </div>
        
        <script src="script.js"></script>
        <script src="learning.js"></script>
    </body>
</html>
</DOCTYPE>

45) create a flawless js using async and defer

<!DOCTYPE html>
<html>
    <head>
        <link rel="stylesheet" href="style.css">
        <title>jstamilguy</title>
    </head>
    <body>


        <div id="content">
            <h1>This is mock</h1>
            <img src="https://images.unsplash.com/photo-1665731372479-551841cac2c9?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxlZGl0b3JpYWwtZmVlZHwxN3x8fGVufDB8fHx8&auto=format&fit=crop&w=400&q=60" alt="">
            
        </div>

        <script defer src="https://javascript.info/article/script-async-defer/long.js?speed=1"></script>
        <script async src="https://javascript.info/article/script-async-defer/long.js?speed=1"></script>
        //content 2

        <div id="content2">
            <h1>This is mock</h1>
            <img src="https://images.unsplash.com/photo-1665731372479-551841cac2c9?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxlZGl0b3JpYWwtZmVlZHwxN3x8fGVufDB8fHx8&auto=format&fit=crop&w=400&q=60" alt="">
            
        </div>


        
        <script src="script.js"></script>
        <script src="learning.js"></script>
    </body>
</html>
</DOCTYPE>



DOM NODES


46) to get the language of doc
document.documentElement.lang

47) to get the constructor name
document.body.constructor.name

48) how to check where the body came from
document.body instanceof HTMLElement
document.body instanceof HTMLBodyElement
document.body instanceof HTMLElement
document.body instanceof Node
document.body instanceof EventTarget

49) to check more abt node
console.log(document.body.nodeName);
console.log(document.body.nodeType);


HTML DOC selection
50) to get elements using hierarchy
var pTag = document.body.children[0].children[1];
console.log(pTag);

GetElementById


51) grab an element using ID
var headingEl = document.getElementById('heading');
console.log(headingEl);

52) view its content
var headingEl = document.getElementById('heading');
console.log(headingEl.innerText);

53) change its content
var headingEl = document.getElementById('heading');
headingEl.innerHTML = "gorewa";


exercise


54)aim to get a value from form and print it onto the bottom stuffs

myMethod
// var headingEl = document.getElementById('heading');
// headingEl.innerHTML = "gorewa";

var inputFood = document.querySelector('.input-food');
console.log(inputFood);
var toBeAdded = document.getElementById('newHeading');
var button = document.getElementById('input-button');
button.addEventListener('click', ()=>{
    toBeAdded.innerText = inputFood.value;
})


his method

// var headingEl = document.getElementById('heading');
// headingEl.innerHTML = "gorewa";

var foodId = document.getElementById('input-food');
var btnId = document.getElementById('input-button');
var response = document.getElementById('response');

btnId.addEventListener('click',()=>{
    response.innerText = foodId.value;
})

note response will be overRided


getElementsByClassName


// var headingEl = document.getElementById('heading');
// headingEl.innerHTML = "gorewa";

var foodId = document.getElementById('input-food');
var btnId = document.getElementById('input-button');
var addFood = document.getElementById('food-container')

btnId.addEventListener('click', ()=>{
    addFood.innerHTML += `<li class='food-item'>${foodId.value}</li>`
})

55) grab those list of items using getlementsByClassName
var getClass = document.getElementsByClassName('food-container');
console.log(getClass);

56) to get the innerHTML of specified value
var getClass = document.getElementsByClassName('food-item');
console.log(getClass[0].innerHTML);

57)to programmatically grab values in an array
var arr = [].map.call(getClass, (food)=>food.textContent);
console.log(arr);




getElementsByTagName

58) grab elements through tht
var tagName = document.getElementsByTagName('li');
console.log(tagName);

59) grab elements through there name
var name = document.getElementsByName('food-name');
console.log(name);


it follows live collection the divs later will be appended on 


<!DOCTYPE html>
<html>
    <head>
        <link rel="stylesheet" href="style.css">
        <title>jstamilguy</title>
    </head>
    <body>
        <header>
            Food cooking planner
        </header>


        <main>
            <div id="input-container">
                <input name= "food-name" type="text" placeholder="what you wanna eat.." class="input-food" id="input-food" value="biriyani">
                <button class="input-button" id="input-button">Submit</button>
            </div>
            <div>
                <ul id= "food-container" class="food-container">
                    <li class="food-item">Biriyani</li>
                    <li class="food-item">Sambar</li>
                    <li class="food-item">Pakoda</li>
                </ul>
            </div>
            <script>
                var tag = document.getElementsByTagName('div');
                console.log(tag);
            </script>

            <div>
                <h1>dummy</h1>
            </div>
        </main>        
        <script src="script.js"></script>
        <script src="learning.js"></script>
    </body>
</html>
</DOCTYPE>



querySelector and querySelectorAll

60) use queryselector to grab only value
var query = document.querySelector('div');
console.log(query);

61) to grab the last element
var query = document.querySelector('li:last-child');
console.log(query);

62) use querySelectorAll to grab stuffs

var all = document.querySelectorAll('div');
console.log(all);


creating DOM

63) still More processing
var all = document.querySelectorAll('div');
console.log(all[0].innerHTML);

64) create a div from js and enable it and using tht show it below all ul
// var headingEl = document.getElementById('heading');
// headingEl.innerHTML = "gorewa";

// var headingEl = document.getElementById('heading');
// headingEl.innerHTML = "gorewa";

var foodId = document.getElementById('input-food');
var btnId = document.getElementById('input-button');
var addFood = document.getElementById('food-container')
var main = document.getElementById('main');

btnId.addEventListener('click', ()=>{
    addFood.innerHTML += `<li class='food-item'>${foodId.value}</li>`
});
var div = document.createElement('div');
var textNode = document.createTextNode('Food is updated');
div.className = "alert";

div.append(textNode);
main.append(div);

65) use it to show before all the elements

var foodId = document.getElementById('input-food');
var btnId = document.getElementById('input-button');
var addFood = document.getElementById('food-container')
var main = document.getElementById('main');

btnId.addEventListener('click', ()=>{
    addFood.innerHTML += `<li class='food-item'>${foodId.value}</li>`
});
var div = document.createElement('div');
var textNode = document.createTextNode('Food is updated');
div.className = "alert";

div.append(textNode);
main.prepend(div);

66) modify our adding elements using dom
//code for the app
var foodId = document.getElementById('input-food');
var btnId = document.getElementById('input-button');
var addFood = document.getElementById('food-container')

btnId.addEventListener('click', ()=>{

    var newList = document.createElement('li');
    newList.className = 'food-item';
    var content = document.createTextNode(foodId.value);
    newList.append(content);
    addFood.append(newList);
})

67)how to create a comment
const comment = document.createComment('hi');
    addFood.append(comment);



getting and setting content


68) grab the contents
var gettingAlert = document.querySelector('.alert .alert-message');
console.log(gettingAlert);

69)all getting and setting stuffs
// var gettingAlert = document.querySelector('.alert .alert-message');
// console.log(gettingAlert.innerContent);
// console.log(gettingAlert.innerText);
// console.log(gettingAlert.innerHTML);
// gettingAlert.innerHTML = `<strong>Hi this is shaam</strong>`;
// gettingAlert.innerContent = `<strong>Hi this is shaam</strong>`;
// gettingAlert.innerText = `<strong>Hi this is shaam</strong>`;



innerHTML vs Dom
70) create new element using those
create Element and innerHTML

const main = document.getElementById("main");

function createAlertviaDOM(message) {
  const div = document.createElement("div");
  const textNode = document.createTextNode(message);
  // injecting textNode into div
  div.append(textNode);
  div.className = "alert";
  main.prepend(div);
}

createAlertviaDOM("Hello i was created by createElement");

// innerHTML
function createAlertviaTemplate(message) {
  const template = `
    <div class="alert">
    ${message}
    </div>
    `;

  main.innerHTML += template;
}

createAlertviaTemplate("Hello i was created by innerHTML");


function createAlertviaTemplate(message) {
    const template = `
      <div class="alert">
      ${message}
      </div>
      `;
  
    main.innerHTML += template;
  }
  
  createAlertviaTemplate("Hello i was created by innerHTML");

71) change the color using css property
div.style.color = 'red';


72) Document Fragment
use document fragment to store data and use normal way so tht we can find which is fast
create 1000 elements using js
 for(let i=0 ; i<=1000 ; i++){
    var li = document.createElement('li');
    li.textContent = 'Food item '+ i;
    
    li.className = 'food-item';
    foodContainerEl.append(li);
  }

73) reduce the time using fragments
var main = document.getElementById("main");
function createAlertViaDom(message) {
  var div = document.createElement("div");
  var textNode = document.createTextNode(message);
  div.className = "alert";
  div.style.color = 'red';
  div.append(textNode);
  // main.append(div);
  main.prepend(div);
}
createAlertViaDom("hi");
// createAlertViaDom('Food is updated');
// createAlertViaDom('Food is updated2');
// var gettingAlert = document.querySelector('.alert .alert-message');
// console.log(gettingAlert.innerContent);
// console.log(gettingAlert.innerText);
// console.log(gettingAlert.innerHTML);
// gettingAlert.innerHTML = `<strong>Hi this is shaam</strong>`;
// gettingAlert.innerContent = `<strong>Hi this is shaam</strong>`;
// gettingAlert.innerText = `<strong>Hi this is shaam</strong>`;

function createAlertviaTemplate(message) {
    const template = `
      <div class="alert">
      ${message}
      </div>
      `;
  
    main.innerHTML += template;
  }
  
  createAlertviaTemplate("Hello i was created by innerHTML");


  var foodContainerEl = document.getElementById('food-container');
  console.time('nway');
  for(let i=0 ; i<=1000 ; i++){
    var li = document.createElement('li');
    li.textContent = 'Food item '+ i;
    
    li.className = 'food-item';
    foodContainerEl.append(li);
  }
  console.timeEnd('nway');


  console.time('fragway');
  const fragment = document.createDocumentFragment();
  for(let i = 0; i<=1000 ; i++){
    var li = document.createElement('li');
    li.textContent = 'Food items' + i;
    li.className = 'food-item';
    fragment.append(li);
  }
  foodContainerEl.append(fragment)
  console.timeEnd('fragway');

74) now use a for loop to append the stuffs which are premade

var foodContainerEl = document.getElementById('food-container');
const favFood = ['cb', 'mb', 'pb'];

const fragDoc = document.createDocumentFragment()
favFood.forEach((food)=>{
    const li = document.createElement('li');
    li.className = 'food-item';
    li.textContent = food;
    fragDoc.append(li);
})
foodContainerEl.append(fragDoc)





inserting elements





75) inserting ways of inserting
const foodContainerEl = document.getElementById('food-container');

const li = document.createElement('li');
li.className = 'input-food';
li.textContent = 'Maggi';
// foodContainerEl.append(li)
// foodContainerEl.prepend(li)
// foodContainerEl.before(li)
// foodContainerEl.after(li)

// foodContainerEl.parentNode.insert(li, foodContainerEl);



inserting as string literals

76) inserting via string literals
foodContainerEl.insertAdjacentHTML('afterbegin', 'beast');
foodContainerEl.insertAdjacentHTML('afterend', 'beast');
foodContainerEl.insertAdjacentHTML('beforebegin', 'beast');
foodContainerEl.insertAdjacentHTML('beforeend', 'beast');
foodContainerEl.insertAdjacentText('beforeend', 'beast');

exercise
const li = document.createElement("li");
li.textContent = "New List";

foodContainerEl.insertAdjacentElement("afterbegin", li);

foodContainerEl.insertAdjacentText(
  "beforebegin",
  "Just Pure text without html tags"
);


77)how to insert element as a literal
const li = document.createElement('li');
li.textContent = 'beast';
li.className = 'food-item';
foodContainerEl.insertAdjacentElement('afterbegin', li);

// remove Food items
function removeFoodItem(event) {
  const existingList = event.target.parentNode.parentNode;
  console.log("logging event", event.target.parentNode.parentNode);

  // new way
  // existingList.remove();

  // old way
  existingList.parentNode.removeChild(existingList);
}



Replacing DOM Elements

replacing elements
78)replace the text with different parametres
const foodEl = document.getElementById('food-container');
const sambarLi = document.querySelector('.food-container :first-child');
const li = document.createElement('li');
li.className = "food-item";
li.textContent = 'geniciro';
// sambarLi.replaceWith(li);
sambarLi.parentNode.replaceChild(li, sambarLi);
foodEl.replaceChildren('textssn', 'textgen');

cloning
79)basic cloning
const foodEl = document.getElementById('food-container');

const cloned = foodEl.cloneNode();
const clonedTrue = foodEl.cloneNode(true);
console.log(clonedTrue); // has descending elements too

// foodEl.append(clonedTrue);

const duplicatedEl = document.getElementById('duplicate');
duplicatedEl.append(clonedTrue)

80) button on tap it clones

works pucca
const foodEl = document.getElementById('food-container');
const clonedTrue = foodEl.cloneNode(true);
const btn = document.getElementById('resync');
const cloned = foodEl.cloneNode();
 // has descending elements too

// foodEl.append(clonedTrue);


btn.addEventListener('click', ()=> {
    const clonedTrue = foodEl.cloneNode(true);
    
    const duplicatedEl = document.getElementById('duplicate');
    duplicatedEl.innerHTML = '';
    duplicatedEl.append(clonedTrue)
})

81) removing an element
using new method

function removeItem(event) {
  let existingList = event.target.parentNode.parentNode;
  existingList.remove();
}


82) removing using old method
function removeItem(event) {
  let existingList = event.target.parentNode.parentNode;
//   existingList.remove();
existingList.parentNode.removeChild(existingList)
}

83) now we have to have values containing x on every run and exhibit a function
let inputFood = document.getElementById("input-food");
let inputBtn = document.getElementById("input-button");
let foodContainer = document.getElementById("food-container");

inputBtn.addEventListener("click", () => {
  // creating li element
  let newFoodItemEl = document.createElement("li");

  let div = document.createElement("div"); //for list-item
  let divBtn = document.createElement("div");

  newFoodItemEl.append(div, divBtn);

  // assigning textContent & className to newFoodItemEl
  div.textContent = inputFood.value;
  newFoodItemEl.className = "food-item";

  divBtn.parentElement.setAttribute("onClick", "removeFoodItem(event)");
  divBtn.innerHTML = `<i class="fa fa-xmark"></i>`;
  newFoodItemEl.append(divBtn);

  // appending newly created element(newFoodItemEl) to foodContainer
  foodContainer.append(newFoodItemEl);

  // resetting the inputFood value
  inputFood.value = "";
});

// remove Food items
function removeFoodItem(event) {
  const existingList = event.target.parentNode.parentNode;
  console.log("logging event", event.target.parentNode.parentNode);

  // new way
  // existingList.remove();

  // old way
  existingList.parentNode.removeChild(existingList);
}




Looping



const foodContainerEl = document.querySelectorAll("#food-container li");

const favouriteFood = [
  "Chicken Biriyani",
  "Mutton Biriyani",
  "Fish Biriyani",
  "Prawn Biriyani",
];

// How to iterate?

// for loop
for (let i = 0; i < favouriteFood.length; i++) {
  console.log(favouriteFood[i]);
}

// for..of
for (const item of favouriteFood) {
  console.log(item);
}




84) looping and getting values through different loop methods
const foods = document.querySelectorAll('.food-container li');
// console.log(foods);

const foodItems = [];


for(const item of foods){
    foodItems.push(item.innerText)
}
console.log(foodItems);

foods.forEach((food) => console.log('foods', food));
[...foods].forEach((food)=> console.log('foods',food));
Array.from(foods).forEach((food) => console.log('foods', food));


Getting children



85) getting child elements and nodes

const list = document.querySelectorAll('li');
const container = document.querySelector('#food-container')
// console.log(list);
console.log(list.length);
console.log(container.children);
console.log(container.childElementCount);
console.log(container.childNodes);
console.log(container.firstChild, container.firstElementChild);
console.log(container.lastChild, container.lastElementChild);

Getting Parent


86) finding parentElement
// console.log(foodContainerEl);
// console.log(foodContainerEl.parentElement);
// console.log(foodContainerEl.parentNode.parentElement);
// console.log(document.body.parentElement);
// console.log(document.body.parentNode);
console.log(document.nodeType); 
// console.log(foodContainerEl.closest('main'));


Getting siblings


87) finding Siblings
use tht key for building ui of ur need
ul>li*5{$}
const numbers = document.querySelector('ul:last-child li');
// console.log(numbers.innerText);
console.log(numbers.nextElementSibling.innerText);
console.log(numbers.nextSibling.innerText);
console.log(numbers.previousSibling.innerText);
console.log(numbers.previousElementSibling.innerText);

88)getting and setting attributes

const name = document.querySelector('.input-name-container input');
// name.value = 'ssn';
// console.log(name);
// console.log(name.id);
// console.log(name.value);
// console.log(name.placeholder);
name.setAttribute("value", 3);
let integ = parseInt(name.value, 10)
console.log(typeof integ);


// use the data-attribute name so tht it gets stored as a data set



more abt getting and setting attrib


const inputName = document.querySelector(".input-name-container input");

// You can get attributes value by DOT Notation
console.log(inputName.type);
console.log(inputName.id);
console.log(inputName.name);
console.log(inputName.placeholder);

const userAge = prompt("What is your age");
// Modifying the value
// inputName.value = "Trisha";
inputName.setAttribute("value", "Rajini");
inputName.setAttribute("value", userAge);
const saveInt = parseInt(inputName.value, 10);
console.log(typeof inputName.value);
console.log(typeof saveInt);

// However, the web browser only converts the standard attributes to the DOM object’s properties.
console.log(inputName.isAlive);

// Task: Create an input field of Age, which accepts number and change it via DOM using Javascript.
// input.value = 26;
// console.log(`My age is: ${26}`);


const inputName = document.querySelector(".input-name-container input");

// Setting the attribute
// Element.setAttribute("name", "fullName") // set the attribute with value
inputName.setAttribute("value", "Rajini");

// // Getting the attribute
const isAliveDOM = inputName.getAttribute("isAlive");
const placeDOM = inputName.getAttribute("place");

console.log(inputName.attributes); // List all attributes of that element
console.log(inputName.attributes[6].value); // attributes by index
console.log(inputName.attributes.place.value); // attributes by property name (DOT Notation)
console.log(inputName.attributes["interest"].value); // attributes by bracket notation
console.log(isAliveDOM, placeDOM);

// // Methods
console.log(inputName.hasAttribute("age")); // check for attribute existence
console.log(inputName.removeAttribute("isAlive")); // remove existing attribute
console.log(inputName.style); // returns CSSStyleDeclaration instead of values

// data-* attributes
console.log(inputName.dataset["interest"]); // get data-* values like this.
let workingBoolean = inputName.dataset.working == "true"; // converting string to boolean
console.log(typeof workingBoolean);

// Task: Display all attributes dynamically.
// for (let attr of inputName.attributes) {
//   console.log(`${attr.name} is ${attr.value}`);
// }



Getting attributes


89) getting attributes
const alive = name.getAttribute('isAlive');
const place = name.getAttribute('place')

change get attributes
/ let newCity = name.dataset.place = 'mumbau';

get all the attributes
// console.log(newCity);
for(let attr of name.attributes){
    console.log(attr);
}

// const name = document.querySelector('.input-name-container input');
// // name.value = 'ssn';
// // console.log(name);
// // console.log(name.id);
// // console.log(name.value);
// // console.log(name.placeholder);
// name.setAttribute("value", 3);
// let integ = parseInt(name.value, 10)
// console.log(typeof integ);
const name = document.querySelector('.input-name-container input');
const alive = name.getAttribute('isAlive');
const place = name.getAttribute('place')
// console.log(alive, place);
// console.log(name.attributes);
// console.log(name.attributes[6].alive);
// console.log(name.attributes.place.value);
// console.log(name.attributes['place'].value);
// console.log(name.hasAttributes('place'));
// name.removeAttribute('place')
// console.log(name.dataset);
// let newCity = name.dataset.place = 'mumbau';
// console.log(newCity);
for(let attr of name.attributes){
    console.log(attr);
}
// use the data-attribute name so tht it gets stored as a data set


setting style using js


90) setting style to button through js
setting using setAttributes
btn.setAttribute('style','padding: 6px 10px;font-size:10px;background-color:royalblue;border:none;border-radius:5px;color:#FFF');

using direct access
direct attributes
// btn.style.padding = '20px';
// btn.style.fontSize = '10px';


using css text
btn.style.cssText = 'background-color: red;'
btn.style.cssText += 'font-weight: bold';

getting elements
console.log(btn.style.fontWeight);

console.log(window.getComputedStyle(btn, ":hover"));


const inputName = document.querySelector(".input-name-container input");
const btnEl = document.querySelector(".input-name-container button");

// style="padding: 6px 10px;font-size:10px;background-color:royalblue;border:none;border-radius:5px;color:#FFF;"

// 1. setAttribute
btnEl.setAttribute(
  "style",
  "padding: 6px 10px;font-size:10px;background-color:royalblue;border:none;border-radius:5px;color:#FFF;"
);

// 2. Direct Property access
console.log(btnEl.style.cssText);
btnEl.style.padding = "6px 10px";
btnEl.style.fontSize = "10px";
btnEl.style.backgroundColor = "royalblue";
btnEl.style.border = "none";
btnEl.style.borderRadius = "5px";
btnEl.style.color = "#FFF";

// 3. cssText
btnEl.style.cssText =
  "padding: 6px 10px;font-size:10px;background-color:royalblue;border:none;border-radius:5px;color:#FFF;";
// btnEl.style.cssText += "font-weight:bold;";

// Getting the style
console.log(btnEl.style.backgroundColor);

// getComputedStyle()
console.log(window.getComputedStyle(btnEl, ":hover"));

// Task: Remove class styling defined in style.css and write the css using Javascript DOM.
// .input-name-container {
//   background: #FFF;
//   border-radius: 5px;
//   padding: 10px;
// }

// .input-name-container input {
//   padding: 2px 10px;
//   outline: none;
//   font-size: 12px;
// }
const inputContainerEl = document.querySelector(".input-name-container");
const inputEl = document.querySelector(".input-name-container input");
inputContainerEl.style.cssText =
  "background: #FFF;border-radius: 5px;padding: 10px;";
inputEl.style.cssText = "padding: 2px 10px;outline: none;font-size: 12px;";







91) change the color of the container with js
const inputContainerEl = document.querySelector(".input-name-container");
const inputEl = document.querySelector(".input-name-container input");
inputContainerEl.style.cssText =
  "background: #FFF;border-radius: 5px;padding: 10px;";
inputEl.style.cssText = "padding: 2px 10px;outline: none;font-size: 12px;";

92) changing the class with js
console.log(container.className);

overriding with js
container.setAttribute('class', 'new-class')
container.className = 'waga';

jst add without overriding
container.className += 'waga';

console.log(container.classList);

jst logging all the classes
for(let c of container.classList){
    console.log(c);
}

those properties of class


// console.log(container.classList.length);
// console.log(container.classList.contains('new-class'));
// container.classList.remove('waga');
// container.classList.replace('new-class', 'gg');
// container.classList.toggle('gg');

// setTimeout(()=>{
//     container.className += 'ssn';
// },5000)

use this to show and container

const inputContainer = document.querySelector('.input-name-container');
const divBtn = document.getElementById('showBtn');

divBtn.addEventListener("click", () => {
    if (inputContainer.style.display === "none") {
        divBtn.innerText = "Hide Div";
        divBtn.style.backgroundColor = "gray";
      inputContainer.style.display = "block";
    } else {
      inputContainer.style.display = "none";
      divBtn.style.backgroundColor = "royalblue";
      divBtn.innerText = "Show Div";
    }
  });



his method
const inputName = document.querySelector(".input-name-container input");

// Get
console.log(inputName.className);

// To overwrite className
inputName.setAttribute("class", "newClassName");
inputName.className += " newClassName2 newClassName3 newClassName4";

// console.log(inputName.classList);
for (let cssClass of inputName.classList) {
  console.log(cssClass);
}

// Manipulations
console.log(inputName.classList.length);
inputName.classList.add("5class");
console.log(inputName.classList.contains("class-invalid"));
console.log(inputName.classList.replace("newClassName4", "newClassName44"));
inputName.classList.remove("newClassName2");
console.log(inputName.className);

setTimeout(() => {
  inputName.classList.toggle("5class");
}, 5000);

// console.log(inputName.classList);

// Task: Show div based on click (toggle)
const inputContainer = document.querySelector(".input-name-container");
const showBtnEl = document.querySelector("#showBtn");

showBtnEl.addEventListener("click", () => {
  if (inputContainer.style.display === "none") {
    showBtnEl.innerText = "Hide Div";
    showBtnEl.style.backgroundColor = "gray";
    inputContainer.style.display = "block";
  } else {
    inputContainer.style.display = "none";
    showBtnEl.style.backgroundColor = "royalblue";
    showBtnEl.innerText = "Show Div";
  }
});





A Basic animation using js

93) animation
const inputContainer = document.querySelector('.input-name-container');
const divBtn = document.getElementById('showBtn');

divBtn.addEventListener("click", () => {
    if (inputContainer.classList.contains('hide')) {
        divBtn.innerText = "Hide Div";
        divBtn.style.backgroundColor = "gray";
    //   inputContainer.style.display = "block";
    inputContainer.classList.remove('hide');
    } else {
      inputContainer.classList.add('hide');
      divBtn.style.backgroundColor = "royalblue";
      divBtn.innerText = "Show Div";
    }
  });




adding Events
94) to stop opening it
oncontextmenu = 'false';
function handleClick(){
    alert('hi');
}

span.onclick = handleClick

95) different ways of calling event listener
window.addEventListener
document.addEventListener
elemenet.addEventListener

using call back function
function handleClick(){
    alert('ssn');
    alert('Natheshwar');
}

span.addEventListener('click',handleClick)





his method


const creditBtnEl = document.querySelector("header span");

// (X) using HTML Attribute
creditBtnEl.setAttribute(
  "onclick",
  'alert("Authored by Anbuselvan - setAttribute")'
);

// (X) Drawbacks - Can't accept multiple actions
creditBtnEl.onclick = function () {
  alert("Authored by Anbuselvan");
};

function handleAuthorInfo() {
  alert("Authored by Trisha");
}

creditBtnEl.onclick = handleAuthorInfo();

// Listen for Events using `AddEventListeners`
// window.addEventListener()
// document.addEventListener()
// element.addEventListeners()

const handleCreditMsg = (event) => {
  alert("Javascript DOM - Anbuselvan");
  console.log(event.target);
  alert(event.type + " at " + event.currentTarget.innerHTML);
  alert("Coordinates: " + event.clientX + ":" + event.clientY);
};

creditBtnEl.addEventListener("click", handleCreditMsg);

document.addEventListener("contextmenu", handleCreditMsg);








Removing event listener


96) get abt event
function msg1(e){
    alert(e);
}
span.addEventListener('click', msg1);

97)removing event listener
const creditBtn = document.querySelector('header button');

function alerting(){
    alert('hi');
}
creditBtn.addEventListener('click',alerting);
creditBtn.removeEventListener('click',alerting);

98)use setTime out and play
const creditBtn = document.querySelector('header button');

function alerting(){
    alert('hi');
}
creditBtn.addEventListener('click',alerting);

setTimeout(()=>{
    creditBtn.removeEventListener('click',alerting);

},5000)

99)if u want to work only once
using recursion
const creditBtn = document.querySelector('header button');

function alerting(){
    alert('hi');
    creditBtn.removeEventListener('click',alerting);
}
creditBtn.addEventListener('click',alerting);


100)const creditBtn = document.querySelector('header button');

function alerting(){
    alert('hi');
}
creditBtn.addEventListener('click',alerting, {once : true});




his method

const creditBtnEl = document.querySelector("header span");

const handleCreditMsg = (event) => {
  // alert("Javascript DOM - Anbuselvan");
  console.log("Event Happening");

  // removing
  // creditBtnEl.removeEventListener("click", handleCreditMsg);
};

// Adding an EventListener
creditBtnEl.addEventListener("click", handleCreditMsg, { once: true });




Bubbling




101) bubbling
use event listener to manipulate and getting target
const formEl = document.querySelector('form');
const divEl = document.querySelector('form div');
const pEl = document.querySelector('form p');

formEl.addEventListener('click', (e)=>{
    alert('form');
    console.log(`Target : ${e.target.tagName}, this : ${e.target}`);
})

divEl.addEventListener('click',()=>{
    alert('div');
})

pEl.addEventListener('click',()=>{
    alert('p');
})

102) stopping the bubbling using stop propagation
divEl.addEventListener('click',(e)=>{
    alert('div');
    e.stopPropagation();
})

103) stopping using immediatePropagation
const formEl = document.querySelector('form');
const divEl = document.querySelector('form div');
const pEl = document.querySelector('form p');

formEl.addEventListener('click', (e)=>{
    alert('form');
    console.log(`Target : ${e.target.tagName}, this : ${e.target}`);
})

divEl.addEventListener('click',(e)=>{
    alert('div');
    // e.stopPropagation();
    e.stopImmediatePropagation();
})

pEl.addEventListener('click',()=>{
    alert('p');
})


divEl.addEventListener('click',(e)=>{
    alert('Another div');
})

104) capturing an event during bubbling phase
formEl.addEventListener('click', ()=>{}, {capture : true})

105) stopping anchor tag from further
<onclick="return false">

onclick="event.preventDefault()">





const formEl = document.querySelector("form");
const divEl = document.querySelector("form div");
const pEl = document.querySelector("form p");

formEl.addEventListener("click", (event) => {
  alert("Form");
  console.log(`Target: ${event.target.tagName}, this: ${formEl.tagName}`);
});

divEl.addEventListener("click", (event) => {
  alert("Div");

  // // Stop Bubbling
  event.stopPropagation();

  // Removes all active event listeners
  event.stopImmediatePropagation();
});

pEl.addEventListener("click", () => {
  alert("P");
});

// To catch an event on the capturing phase
formEl.addEventListener("click", () => {}, { capture: true }); // by default false,

// Task: Catch the Capturing & Bubbling Phrase
for (let elem of document.querySelectorAll("form, form *")) {
  // Capturing Phase
  elem.addEventListener(
    "click",
    () => {
      console.log(`Capturing Phase: ${elem.tagName}`);
    },
    { capture: true }
  );

  // Bubbling Phase
  elem.addEventListener("click", () => {
    console.log(`Bubbling Phase: ${elem.tagName}`);
  });
}


event prevented

const formEl = document.querySelector("form");
const inputEl = document.querySelector("form input");
const checkboxEl = document.querySelector("form input[type='checkbox']");

formEl.addEventListener("submit", (event) => {
  event.preventDefault(); // Stops default behaviour

  // Task: Validate all input fields to respective rules ()
  if (
    inputEl.value != "" ||
    inputEl.value.length <= 3 ||
    inputEl.value.length > 20
  ) {
    alert("Validation Error: Name Invalid");
    return;
  }

  if (!checkboxEl.checked) {
    alert("Validation Error: Check the terms.");
    return;
  }

  console.log("Form Submitted", inputEl.value, checkboxEl.checked);

  console.log("DefaultPrevented:", event.defaultPrevented);
});




event Delegation
106) when clicked in a huge list it should show up
const listEl = document.querySelectorAll('form li');
listEl.forEach((li)=>{
    li.addEventListener('click',()=>{
        console.log('clicked', li.textContent);
    })
})

107) adding css to it
target.style.backgroundColor = 'yellow';

108) playing with colors and removing them
then using btn to show love and support

const table = document.querySelector('table');
let selectId;
table.addEventListener('click',(e)=>{
    const target = e.target;
    const closestTr = target.closest('tr');
    if(selectId != undefined){
        selectId.classList.remove('active');
    }

    selectId = closestTr;
    console.log(target);
    // target.style.backgroundColor = 'yellow';
    closestTr.classList.add('active')
});

document.addEventListener("click", (event) => {
    const id = event.target.dataset.toggleId;
  
    if (!id) return; // ignore all
  
    const el = document.getElementById(id);
  
    el.hidden = !el.hidden;
  });
  
  const formEl = document.querySelector("#donate-form");
  
  formEl.addEventListener("submit", (event) => {
    event.preventDefault();
  
    const donateAmount = event.target.querySelector("input").value;
  
    alert(`Thank you for donating ₹${donateAmount}.`);
  });





hismethod


const tableEl = document.querySelector("table");

let selectedId;

tableEl.addEventListener("click", (event) => {
  const target = event.target;
  const closestTr = target.closest("tr");

  if (target.tagName === "TH") return; // Ignoring TH element.

  if (selectedId != undefined) {
    selectedId.classList.remove("active"); // removing class
  }

  selectedId = closestTr;

  closestTr.classList.add("active");

  alert(`Hello ${closestTr.children[0].textContent}`);
});

// Task: Show a donate page based on Toggle
document.addEventListener("click", (event) => {
  const id = event.target.dataset.toggleId;

  if (!id) return; // ignore all

  const el = document.getElementById(id);

  el.hidden = !el.hidden;
});

const formEl = document.querySelector("#donate-form");

formEl.addEventListener("submit", (event) => {
  event.preventDefault();

  const donateAmount = event.target.querySelector("input").value;

  alert(`Thank you for donating ₹${donateAmount}.`);
});




Mouse Events


109)mouse events
document.addEventListener('mousedown',(e)=>{
//     console.log(e);
// }) onclickactivity

110) nocopypaste
document.addEventListener('copy',(event)=>{
    event.preventDefault();
})

111)
document.addEventListener('mouseup',(e)=>{
//     console.log(e);
// }) 

112)
document.addEventListener('mouseenter',(e)=>{
        console.log(e);
    }) when it does enter it calculates

113)

document.addEventListener('mousemove',(e)=>{
    console.log(e);
}) 
for gaming up and down stuffs

114)
document.addEventListener('mouseout',(e)=>{
    console.log(e);
}) enter leave stuffs

115)
document.addEventListener('mouseover',(e)=>{
    console.log(e); come inside and over it calculates
})

116) small mouse sln

document.addEventListener("mouseup", (event) => {
  switch (event.button) {
    case 1:
      alert("Left click");
      break;
    case 2:
      alert("Middle Click");
      break;
    case 3:
      alert("Right Click");
      break;
    default:
      alert(
        "Invalid or unknown click detected! - " + event.which + " is pressed!"
      );
      break;
  }
});


KeyBoard events



117)keyBoard events
keyup - when released 
document.addEventListener('keyup',(e)=>{
    console.log(e);
})


keyDown - when pressed
document.addEventListener('keydown',(e)=>{
    console.log(e);
})


118) key pressing and its based switch task

// document.addEventListener("keyup", (event) => {
//   switch (event.key) {
//     case "ArrowUp":
//       alert("You have pressed ArrowUp Key");
//       break;
//     case "ArrowDown":
//       alert("You have pressed ArrowDown Key");
//       break;
//     case "ArrowLeft":
//       alert("You have pressed ArrowLeft Key");
//       break;
//     case "ArrowRight":
//       alert("You have pressed ArrowRight Key");
//       break;
//     default:
//       alert("Unknown key detected");
//       break;
//   }
// });

119)key operation along with ui

inputFood.addEventListener('keyup',(event)=>{
  if(event.key === 'Enter'){
    handleClick();
  }else if(event.key === 'KeyZ'){
    inputFood.value = '';
  }
})



accessing the form



120)accessing forms
document.forms

121) other ways to copy
const formEl = document.forms[0];

122) ways to grab the form value

const formEl = document.forms.feedback;
const nameEl = formEl.elements[0];
const emailEl = formEl.elements[4];
console.log(nameEl, emailEl);

123) waays to grab using name
const fullNameEl = formEl.elements.fullName; // or by index/bracket notation
const typeEl = formEl.elements.type;
const emailEl = formEl.elements.email;
const descEl = formEl.elements.description;
const termsEl = formEl.elements.terms;

124)
const fullNameEl = formEl.fullName; // or by index/bracket notation
const typeEl = formEl.type;
const emailEl = formEl.email;
const descEl = formEl.description;
const termsEl = formEl.terms;

125) another way to call it
const {fullName} = formEl.elements;
console.log(fullName.placeholder);

126) renaming
    const { fullName : name, type, email, desc, terms } = formEl.elements;






Accessing forms


const tableEl = document.querySelector("table");

let selectedId;

tableEl.addEventListener("click", (event) => {
  const target = event.target;
  const closestTr = target.closest("tr");

  if (target.tagName === "TH") return; // Ignoring TH element.

  if (selectedId != undefined) {
    selectedId.classList.remove("active"); // removing class
  }

  selectedId = closestTr;

  closestTr.classList.add("active");

  alert(`Hello ${closestTr.children[0].textContent}`);
});

// Task: Show a donate page based on Toggle
document.addEventListener("click", (event) => {
  const id = event.target.dataset.toggleId;

  if (!id) return; // ignore all

  const el = document.getElementById(id);

  el.hidden = !el.hidden;
});

const formEl = document.querySelector("#donate-form");

formEl.addEventListener("submit", (event) => {
  event.preventDefault();

  const donateAmount = event.target.querySelector("input").value;

  alert(`Thank you for donating ₹${donateAmount}.`);
});



Form submit data

127) using form data to reshape api
    console.log(new FormData(formEl));
128) formData vs submit
const handleClick = (event) =>{
    event.preventDefault();
    console.log(...new FormData(formEl));
    console.log('Form Submitted');
}

const handleFireData = ()=>{
    console.log('form data fired');
}
formEl.addEventListener('formdata', handleFireData);
formEl.addEventListener('submit',handleClick);
129)for getting key and values
console.log([...formData.entries()]);

130)other available stuffs in formData
const handleFireData = (e)=>{
    console.log('form data fired');
    const formData = e.formData;
    formData.append('apikey','fasdfsdasf');
    console.log([...formData.entries()]);
    console.log([...formData.values()]);
    console.log([formData.get('fullName')]);
    console.log(formData);
}

131) to check whether stuffs or there or not
console.log([formData.has('email')]);





His method



const formEl = document.forms.feedback;
const btnEl = document.querySelector("form button");

const handleSubmit = (event) => {
  event.preventDefault(); // Prevent default behaviour

  // construct a FormData object, which fires the formdata event
  const formData = new FormData(formEl);

  // formdata gets modified by the formdata event
  console.log("My API KEY IS: ", formData.get("api-key"));
};

const handleFormData = (e) => {
  console.log("formdata fired!");

  const formData = e.formData;

  // useful methods
  formData.append("api-key", "sadsadsadsadsadsa"); // append new key-value pairs
  console.log([...formData.entries()]); // get entries
  console.log([...formData.values()]); // get only values
  console.log(formData.get("email")); // get individual form element's value
  console.log(formData.getAll("type")); // returns an array of all the values by a key name
  console.log(formData.has("gender")); // returns true if the FormData object contains a key name.
  console.log([...formData.keys()]); // returns an iterator of all the keys.
  formData.set("hobbies", "Learning new things"); //sets a new value for an existing key name
  formData.delete("terms"); // deletes the key
  console.log([...formData.values()]); //returns an iterator of all the values in the FormData object.
};

formEl.addEventListener("submit", handleSubmit);

formEl.addEventListener("formdata", handleFormData);



HTML form DATA to SERVER





132) There are 2 types of formatting
query
json

query
const dataString = data.map((x)=> `${x[0]}=${x[1]}`);
    console.log(dataString);


his method



const formEl = document.forms.feedback;
const btnEl = document.querySelector("form button");

const handleSubmit = (event) => {
  event.preventDefault();

  const formData = new FormData(formEl);

  // 1. QueryString: content-type: application/x-www-form-urlencoded
  // ?fullName=Tana+Stark&type=technical-support&email=wukoma%40mailinator.com&description=Doloremque+excepteur&terms=true
  const data = [...formData.entries()];

  const dataString = data
    // .map((x) => `${encodeURIComponent(x[0])}=${encodeURIComponent(x[1])}`)
    .map(
      ([key, value]) =>
        `${encodeURIComponent(key)}=${encodeURIComponent(value)}`
    )
    .join("&"); // old way of doing

  console.log("usingMap", dataString); //

  const dataString2 = new URLSearchParams(formData).toString();

  console.log("URLSearchParams", dataString2);

  // 2. JSON
  const jsonData = JSON.stringify(Object.fromEntries(formData));

  // Send to Backend
  console.log("JSON BODY", jsonData);
};

formEl.addEventListener("submit", handleSubmit);



POSTING FORM DATA

133)posting FormDATA
WE CAN get xmlHTTPReques xhr used to get data without reloading

process api
let xhr = new XMLHttpRequest();
    xhr.open('GET',"https://reqres.in/api/users/2", true);
    xhr.send();
}

now access the data using a div inhtml
 xhr.open('GET',"https://reqres.in/api/users/2", true);
    xhr.onload = function(){
        const div = document.getElementById('response');
        div.innerText = xhr.responseText;
        

        console.log(xhr.responseText);
    }
    xhr.send();

further processing
const obj = JSON.parse(xhr.responseText)
        const div = document.getElementById('response');
        div.innerText = obj.data.first_name;
        

        console.log(xhr.responseText);

using fetch
fetch('https://reqres.in/api/users/2', {
        method : "POST",
        headers: {
            'Content-Type' : 'application/json',
            // 'Content-Type' : 'application/x-www-form-urlencoded'
        }, 
        body: jsonData,
    })

displaying stuffs
  .then((res) => res.json())
    .then((data) => {
      document.getElementById('response').innerText = JSON.stringify(data);
    });
};




His methods


const formEl = document.forms.feedback;
const btnEl = document.querySelector("form button");

const handleSubmit = (event) => {
  event.preventDefault();

  const formData = new FormData(formEl);

  const jsonData = JSON.stringify(Object.fromEntries(formData));

  // Send to Backend
  // 1. XMLHttpRequest
  let xhr = new XMLHttpRequest();
  xhr.open("GET", "https://reqres.in/api/users/2", true);
  xhr.onload = function () {
    const obj = JSON.parse(xhr.responseText);
    document.getElementById("response").innerText = obj.data.first_name;
  };
  xhr.send();

  // 2. fetch(), axios()
  fetch("https://reqres.in/api/users?page=2", {
    method: "GET",
    // headers: {
    //   // 'Content-Type': 'application/x-www-form-urlencoded' // MIME
    //   "Content-Type": "application/json", // MIME
    // },
    // body: jsonData,
  })
    .then((res) => res.json())
    .then((data) => {
      document.getElementById("response").innerText = JSON.stringify(data.data);
    });
};

formEl.addEventListener("submit", handleSubmit);



Input Events




inputEvents
const formEl = document.forms.feedback;
const nameEl = formEl.elements.fullName;

// Get Properties & Methods
console.log(nameEl);

// 1. Attributes
nameEl.value = "Anbu";
nameEl.disabled = true;
nameEl.readOnly = true;

// 2. Events
nameEl.addEventListener("focus", () => console.log("focused!"));
nameEl.addEventListener("blur", () => console.log("blur"));
nameEl.addEventListener("input", (e) =>
  console.log(`You have entered: ${e.target.value}`)
);
nameEl.addEventListener("change", (e) =>
  console.log(`Changed value: ${e.target.value}`)
);

// Other events
nameEl.addEventListener("cut", () => console.log("cut"));
nameEl.addEventListener("copy", () => {
  alert("You can't copy the values");
});
nameEl.addEventListener("paste", () => console.log("paste"));

// 3. Methods
nameEl.focus();
nameEl.blur();

const handleSubmit = (event) => {
  event.preventDefault();

  const formData = new FormData(formEl);
};

formEl.addEventListener("submit", handleSubmit);

// Task: Task: Create a One-way binding, when the name field changes, it should great like `Hello, {enteredInput} in real time.`

nameEl.addEventListener("change", (event) => {
  document.querySelector(
    "#nameGreet"
  ).innerText = `Hello ${event.target.value}, `;
});


onClicking - focussed
onOutside - blur
note it should work only onforms or elements'

input - it takes place when tyypes
changed - final value
focus - default focus

cut and copy are events can be prevented

one way binding changing name accordingly
nameEl.addEventListener("change", (event) => {
  document.querySelector(
    "#nameGreet"
  ).innerText = `Hello ${event.target.value}, `;
});



RADIO INPUT
radio input
when logged gives radio list
getting abt radio btn
allCategories.forEach((category) => {
  console.log(category.value);
  console.log(category.checked);
});

ways to print wat we exactly wanna 
inputCategory.addEventListener("change", (event) => {
  const checked = allCategories.find((category) => {
    return category.checked;
  });
  console.log("Selected: ", checked.value);
  console.log("Simple: ", event.target.value);
});

both of the methods can be used
select automatically selects values

fully
including the task of alerting after touching

const formEl = document.forms.feedback;
const categoryEl = formEl.elements.type;

const inputCategory = document.querySelector("#input-categories");

const allCategories = [...categoryEl];

// Get Properties & Methods
console.log(categoryEl);
console.log(allCategories);

// 1. Attributes
allCategories.forEach((category) => {
  console.log(category.value);
  console.log(category.checked);
});

// 2. Events
inputCategory.addEventListener("change", (event) => {
  const checked = allCategories.find((category) => {
    return category.checked;
  });
  console.log("Selected: ", checked.value);
  console.log("Simple: ", event.target.value);
});

// 3. Methods
allCategories[1].select();
allCategories[2].checked = true;

const handleSubmit = (event) => {
  event.preventDefault();

  const formData = new FormData(formEl);
};

formEl.addEventListener("submit", handleSubmit);

// Task:  If contribution radio button clicked, then show an alert message of "Thank you for contributing." after 1 Sec.

inputCategory.addEventListener("change", (event) => {
  const checked = allCategories.find((category) => category.checked);
  // const checked = event.target;

  if (checked.value === "contribution") {
    setTimeout(() => {
      alert("Thank you for contributing!");
    }, 1000);
  }
});



CheckBoxEvent


hobbieList.forEach((e)=>{
    console.log(e.checked);
})

checkBox stuffs
const formEl = document.forms.feedback;
const termsEl = formEl.elements.terms;

// Get Properties & Methods
// console.log(termsEl);

// 1. Attributes
// termsEl.checked = true;
// termsEl.indeterminate = true;
// console.log(termsEl.value);

// 2. Events
// termsEl.addEventListener("change", (event) => {
//   console.log(event.target.checked);
// });

// 3. Methods
// termsEl.select();
// termsEl.checked = true;

const handleSubmit = (event) => {
  event.preventDefault();

  const formData = new FormData(formEl);
};

formEl.addEventListener("submit", handleSubmit);

// Task: Show alert on click and display some contents, and if i click ok, it should check, if not it should not check.
termsEl.addEventListener("click", (e) => {
  if (e.target.checked) {
    let confirmation = confirm("Here are some terms, do you accept?");

    if (!confirmation) {
      e.preventDefault();
    }
  }
});

setting the values
countryEl.value = "IND"; // set
console.log(countryEl.value); // g

in select use multiple for selecting multiple stuffs
selectedIndex for selecting accordingly

selection using DOM'console.log(countryEl.options[countryEl.selectedIndex].value);
console.log(countryEl.options.selectedIndex);

perform basic alert stuffs then come for this

countryEl.addEventListener("change", (event) => {
  console.log(event.target.options[event.target.selectedIndex]);
  console.log(
    `Selected value: ${event.target.options[event.target.selectedIndex].value}`
  ); // get value
  console.log(
    `Selected Text: ${event.target.options[event.target.selectedIndex].text}`
  ); // get text
});



Selecting Input



finally
const formEl = document.forms.feedback;
const countryEl = formEl.elements.country;

console.log(countryEl);

// 1. Properties
countryEl.value = "IND"; // set
console.log(countryEl.value); // get

// 2. Selected Index
countryEl.selectedIndex = 2;
console.log(countryEl[2].value);

// 3. Selected DOM Element
console.log(countryEl.options[countryEl.selectedIndex].value);
console.log(countryEl.options.selectedIndex);

// 4. Events
countryEl.addEventListener("change", (event) => {
  console.log(event.target.options[event.target.selectedIndex]);
  console.log(
    `Selected value: ${event.target.options[event.target.selectedIndex].value}`
  ); // get value
  console.log(
    `Selected Text: ${event.target.options[event.target.selectedIndex].text}`
  ); // get text
});

// 5. Options
// 5.1 Using DOM methods
const optionEl = document.createElement("option");
optionEl.value = "FAZ";
optionEl.text = "South Africa";

// 5.2. Using the Option Constructor
const option2 = new Option("Indonesia", "IDN");

// Adding option to select tag
countryEl.add(optionEl, 2);
countryEl.add(option2, 10);
countryEl.remove(4); // removes 4th index

const handleSubmit = (event) => {
  event.preventDefault();

  const formData = new FormData(formEl);
};

formEl.addEventListener("submit", handleSubmit);

adding option additionall
const optionEl = document.createElement("option");
optionEl.value = "FAZ";
optionEl.text = "South Africa";

or we can use Option constructor






adding finishing touch



name should show image when nothing there and list when something there

let inputFood = document.getElementById("input-food");
let inputBtn = document.getElementById("input-btn");
let foodContainer = document.getElementById("food-container");
let noListEl = document.getElementById("no-list");
const foodListStatistics = document.getElementById("food-list-statistics");

const handleInputFood = () => {
  // creating li element
  let newFoodItemEl = document.createElement("li");

  let div = document.createElement("div"); //for list-item
  let divBtn = document.createElement("div");

  newFoodItemEl.append(div, divBtn);

  // assigning textContent & className to newFoodItemEl
  div.textContent = inputFood.value;
  newFoodItemEl.className = "food-item";

  divBtn.parentElement.setAttribute("onClick", "removeFoodItem(event)");
  divBtn.innerHTML = `<i class="fa fa-xmark"></i>`;
  newFoodItemEl.append(divBtn);

  // appending newly created element(newFoodItemEl) to foodContainer
  foodContainer.append(newFoodItemEl);

  // resetting the inputFood value
  inputFood.value = "";

  refreshUI();
};

inputBtn.addEventListener("click", handleInputFood);

inputFood.addEventListener("keyup", (event) => {
  if (event.key === "Enter") {
    handleInputFood();
  } else if (event.key === "KeyZ" && (event.ctrlKey || event.metaKey)) {
    // Undo Operations
    inputFood.value = "";
  }
});

// remove Food items
function removeFoodItem(event) {
  const existingList = event.target.parentNode.parentNode;
  existingList.remove();

  refreshUI();
}

function refreshUI() {
  foodListStatistics.innerText = `You have ${foodContainer.children.length} lists`;

  // if (foodContainer.children.length > 0) {
  //   //  children exist, so don't show `no-list` div
  //   noListEl.hidden = true;
  // } else {
  //   // children not exist, show `no-list` div
  //   noListEl.hidden = false;
  // }

  // You can write better!
  foodContainer.children.length > 0
    ? ((noListEl.hidden = true), (foodListStatistics.hidden = false))
    : ((noListEl.hidden = false), (foodListStatistics.hidden = true));}






local storage
use json.stringify coz it will be available as object
let inputFood = document.getElementById("input-food");
let inputBtn = document.getElementById("input-btn");
let foodContainer = document.getElementById("food-container");
let noListEl = document.getElementById("no-list");
const foodListStatistics = document.getElementById("food-list-statistics");

const localStorageKey = "foodItems";

document.addEventListener("DOMContentLoaded", () => {
  // localStorage fetch, draw ui.
  const fetchedFoodItems = [
    ...JSON.parse(localStorage.getItem(localStorageKey)),
  ];

  fetchedFoodItems.forEach((item) => {
    let newFoodItemEl = document.createElement("li");

    let div = document.createElement("div"); //for list-item
    let divBtn = document.createElement("div");

    newFoodItemEl.append(div, divBtn);

    // assigning textContent & className to newFoodItemEl
    div.textContent = item.foodItem;
    newFoodItemEl.className = "food-item";

    divBtn.parentElement.setAttribute("onClick", "removeFoodItem(event)");
    divBtn.innerHTML = `<i class="fa fa-xmark"></i>`;
    newFoodItemEl.append(divBtn);

    // appending newly created element(newFoodItemEl) to foodContainer
    foodContainer.append(newFoodItemEl);
  });

  refreshUI();
});

const handleInputFood = () => {
  // creating li element
  let newFoodItemEl = document.createElement("li");

  let div = document.createElement("div"); //for list-item
  let divBtn = document.createElement("div");

  newFoodItemEl.append(div, divBtn);

  // assigning textContent & className to newFoodItemEl
  div.textContent = inputFood.value;
  newFoodItemEl.className = "food-item";

  divBtn.parentElement.setAttribute("onClick", "removeFoodItem(event)");
  divBtn.innerHTML = `<i class="fa fa-xmark"></i>`;
  newFoodItemEl.append(divBtn);

  // appending newly created element(newFoodItemEl) to foodContainer
  foodContainer.append(newFoodItemEl);

  // set localStorage
  localStorage.setItem(
    localStorageKey,
    JSON.stringify([
      ...JSON.parse(localStorage.getItem(localStorageKey) || "[]"),
      { foodItem: inputFood.value },
    ])
  );

  // resetting the inputFood value
  inputFood.value = "";

  refreshUI();
};

inputBtn.addEventListener("click", handleInputFood);

inputFood.addEventListener("keyup", (event) => {
  if (event.key === "Enter") {
    handleInputFood();
  } else if (event.key === "KeyZ" && (event.ctrlKey || event.metaKey)) {
    // Undo Operations
    inputFood.value = "";
  }
});

// remove Food items
function removeFoodItem(event) {
  const existingList = event.target.parentNode.parentNode;
  existingList.remove();

  // remove from localStorage
  const fetchedFoodItems = [
    ...JSON.parse(localStorage.getItem(localStorageKey)),
  ];

  fetchedFoodItems.forEach((item) => {
    if (item.foodItem === existingList.innerText) {
      fetchedFoodItems.splice(fetchedFoodItems.indexOf(item), 1);
      // remove from localStorage
    }
  });

  localStorage.setItem(localStorageKey, JSON.stringify(fetchedFoodItems));

  refreshUI();
}

function refreshUI() {
  foodListStatistics.innerText = `You have ${foodContainer.children.length} lists`;

  // if (foodContainer.children.length > 0) {
  //   //  children exist, so don't show `no-list` div
  //   noListEl.hidden = true;
  // } else {
  //   // children not exist, show `no-list` div
  //   noListEl.hidden = false;
  // }

  // You can write better!
  foodContainer.children.length > 0
    ? ((noListEl.hidden = true), (foodListStatistics.hidden = false))
    : ((noListEl.hidden = false), (foodListStatistics.hidden = true));
}
